{"pages":[],"posts":[{"title":"TensorNetwork","text":"什么是Tensor Networks?张量网络(Tensor networks)是一种有效表达和操纵关联数据的数据结构。他们将高维数据分解为几个指标张量(index tensor)(每个指标张量只包含比较少的参数)的乘积。 张量网络最初是在量子多体理论的背景下发展起来的。它不仅帮助我们在理论上，尤其是量子纠缠方面理解波函数。而且为许多有效的数值模拟方法奠定了基础。 近年来，张量网络在量子重力和全息、纠错码、经典数据压缩、大数据分析和机器学习等研究领域得到了广泛的应用。 Tensor Networks用来干什么？张量网络是用来表示相关数据的集合的，这些数据的性质取决于所讨论的应用： 研究量子多体系统，张量网络可以编码为状态波函数的系数 研究经典多体系统，张量网络可以编码为微观状态的统计集合 大数据分析，张量网络可以表示来自不同领域的多维数据，比如信号处理、神经科学、生物度量、模式识别等 Why Tensor Networks？张量网络表示有哪些优势： 张量网络提供了大型结构数据集的压缩表示。 张量网络可以更好的描述数据集的结构特征，特别是在数据的关联性上。此外，用于表示网络的图示符号可以在视觉上清楚直观地理解这些结构。 张量网络自然地提供了数据集的分布式表示，因此许多操作可以并行的执行。 张量网络为处理大数据集合提供了一个标准的框架。一些常见的任务，比如统计信息的评估，是通过一个小的张量网络工具集合来完成的，这些张量网络工具的使用不需要任何关于底层数据集或数据代表什么的具体知识。 张量网络通常非常适合处理有噪声或丢失的数据，因为它们所基于的分解通常是健壮的。 如何学习Tensor Networks?一个关于TensorNetwork的网站，上面有详尽的关于TensorNetworks的学习流程和资料。 TensorNetwork","link":"/2020/02/18/TensorNetwork/"},{"title":"Introduction to tensor network notation","text":"​ 张量网络有效的一个主要原因是通常用来描述它们的直接而透明的符号。使用图形语言，结构是明显的。研究对象的许多一般性质，特别是量子态，可以直接从描述它们所需的网络结构中识别出来。 ​ Tensor network notation(TNN)可以看成Einstein summation notation 的推广。接下来的部分，将介绍张量和可以对其进行的操作。 Tensors​ 张量是向量和矩阵的推广。一个$d$维向量可以看成是$\\mathbb{C}^d$的有序集合。一个$n\\times m$维矩阵可以看成是$\\mathbb{C}^{n\\times m}$的有序集合。一个维度为$d_1 \\times \\cdots \\times d_r$的$r$阶(rank-r)张量可以看成是$\\mathbb{C}^{d_1 \\times \\cdots \\times d_r}$的有序集合。标量、向量和矩阵可以分别视为0阶，1阶和2阶张量。 ​ 在张量网络记数法中，一个张量简单地用一个伸出来的几何图形表示，每个张量对应一个指标，类似于爱因斯坦记数法的指标。例如，一个4阶的张量R可以表示为 ​ 在某些情况下，腿的形状和方向可以表示张量或指标的某些性质——但是对于一般的网络来说，两者都没有什么特殊的意义。在表示量子态时，通常可以方便地使用腿的方向来表示对应的向量是存在于Hilbert空间(‘kets’)还是其对偶(‘bras’)中。通过这个约定，可以避免执行一些禁止的缩并(contraction)，例如两个右矢(‘kets’)的缩并。 Tensor operations​ TNN表示的一个主要优点在于一个张量可以表示为一些其它张量的复合。两个主要的操作为张量积(product)和迹(trace)，常用于联合操作(joint operation)的缩并。除了这两个操作，一个张量的秩，即阶数，也可以通过分组或分裂指标来改变(grouping/splitting indices)。 Tensor product​ 张量可以视为向量外积的推广。张量积在给定指标集上的值是每个张量相应指标元素值的乘积。显示地用指标符号表示，二元张量积的形式为： [A \\otimes B]_{i_1,\\ldots,i_r,j_1,\\ldots,j_s }:=A_{i_1,\\ldots,i_r}\\cdot B_{j_1,\\ldots,j_s}从下图可以看到，张量积就是两个紧挨着的张量。因此，一个包含不相交张量的网络的值就是组成值的乘积。 Trace​ 取迹操作((partial) trace)。对于$x$指标和$y$指标维数相同($d_x=d_y$)的张量$A$，着两个维度的部分取迹操作就是这两维上相同指标数据的相加求和。 [Tr_{x,y}A]_{i_1,\\ldots,i_{x-1},i_{x+1},\\ldots,i_{y-1},i_{y+1},\\ldots,i_r}= \\sum_{\\alpha=1}^{d_x}A_{i_1,\\ldots,i_{x-1},\\alpha ,i_{x+1},\\ldots,i_{y-1},\\alpha,i_{y+1},\\ldots,i_r}类似于爱因斯坦符号，这个求和在TNN中是隐式的，由相对应的连接的腿表示。与爱因斯坦表示法相比，它的一个优点是不需要对这些求和指数进行命名，这使得这种表示法对于大型网络来说不那么笨拙。 ​ 从这个符号中我们可以很容易地看出迹的一个性质是它的循环性质。通过简单地滑动其中一个矩阵，这只会改变网络中张量的位置，因此不会改变值，我们可以循环这些矩阵(注意移位)来证明$Tr(AB)=Tr(BA)$。 Contraction​ 最常用的张量运算是缩并(constraction)。一个例子是两个3阶张量的两对指标之间的缩并： 上图中六个指标缩并为两个。 ​ 常见的压缩例子有向量内积、矩阵-向量乘法、矩阵-矩阵乘法和矩阵的迹。 Grouping and splitting​ 在张量网络的研究中，秩是一个相当不稳定的概念。张量空间$\\mathbb{C}^{a_1 \\times \\cdots \\times a_n}$和$\\mathbb{C}^{b_1 \\times \\cdots \\times b_m}$在维数匹配时($\\prod_i a_i =\\prod_i b_i$)可以同构同一个向量空间。利用这一点，我们可以将以前只定义向量和矩阵的概念和技术扩展到所有的张量。为了做到这一点，我们可以对指标进行分组或拆分，从而分别降低或提高给定张量的秩。 ​ 考虑缩并两个任意张量的情况。如果我们把参与和不参与这个收缩的指标放在一起，这个过程就简化为矩阵乘法。 这种简化矩阵乘法正是数值张量包执行压缩的方式，允许它们利用高度优化的矩阵乘法代码包。 ​ 分组和分割的精确细节并不是唯一的，要根据基(basis)的选择所决定。一个特别的约定选择是以张量积为基，即在积空间上定义一组基，改积空间由各基的积给出。张量积基在量子信息中的规范使用允许对上面描述的分组和分裂进行隐式处理。例如$|0\\rangle \\otimes |1\\rangle \\equiv |01\\rangle$的表示忽略了精确的分组：左边的张量积可以视为$2 \\times 2$维的矩阵，右边可以看出4维的向量。量子信息中的张量积实际上常常是kroecker product，即真实的张量积和上述的分组。 ​ 更具体地说，考虑一个$n+m$阶的张量，将其开始的$n$个指标和接着的$m$个指标分组构成一个矩阵。 T_{I,J}:=T_{i_1,\\ldots,i_n;j_1,\\ldots,j_m}其中分组指标定义为 I:=i_1+d_1^{(i)}\\cdot i_2+d_1^{(i)}d_2^{(i)}\\cdot i_3+\\cdots+d_1^{(i)}\\ldots d_{n-1}^{(i)}\\cdot i_n \\\\ J:=j_1+d_1^{(j)}\\cdot j_2+d_1^{(j)}d_2^{(j)}\\cdot j_3+\\cdots+d_1^{(j)}\\ldots d_{n-1}^{(j)}\\cdot j_n$d_x^{(i)}(d_x^{(j)})$是类型$i(j)$第$x$个指标的维数。相当于将张量在两个方向上分组展开，上式为总的指标数。当这样一个分组被给出时，可以将张量视为矩阵，执行标准的矩阵操作。 ​ 一个重要的例子是奇异值分解(singular value decomposition(SVD))。 T_{I,J}=\\sum_{\\alpha}U_{I,\\alpha}S_{\\alpha,\\alpha}\\overline{V}_{J,\\alpha} T_{i_1,\\ldots,i_n;j_1,\\ldots,j_m}=\\sum_{\\alpha}U_{i_1,\\ldots,i_n,\\alpha}S_{\\alpha,\\alpha}\\overline{V}_{j_1,\\ldots,j_m,\\alpha}只要分组的选择是一致的，分组的精确方法就不会对结果产生影响。因此可以保持分组是隐式的，就如上图所示。 ​ 按上面的方法，SVD可以表示为上图，其中$U$和$V$是等容的(isometric)($U^{\\dagger}U=V^\\dagger V=1$)跨越指标划分。这种把指标分成两个不相交集合的方法称为张量的对分(bisection)。 为什么关注SVD？ …. Tensor networks​ 整合上述的操作，可以给出张量网络的一个定义。张量网络是一个图，它告诉我们如何把几个张量组合成一个复合张量。整个张量的秩是由图中不匹配的边的数目给出的。对于给定的外部指标值，由内部组成张量的值的积给出，再进行所有与缩并一致的内部指标求和。一个例子如下图所示： Bubbling​ 张量网络定义为它们的值与组成张量的缩并顺序无关，这影响了计算的复杂性和实用性。张量网络可以从一个张量开始缩并，然后一次一个张量地反复缩并。 ​ 张量引入(introduce)和缩并(constract)的顺序称为冒泡(bubbling)。当冒泡被执行时，网络被吞噬到存储的张量中，直到只剩下结果。不同的收缩途径会带来不同的计算难度，因此网络存在高效的冒泡和低效的冒泡。 上图为低效的冒泡过程，可以看到图中的跟踪张量(红点)最大可以达到$n$阶，即“梯子”的最大长度。这样张量中的元素为$n$的指数级，张量缩并所需要的内存和遍历时间也是指数级的，这在$n$很大的情况下是不可行的。而如果按下图的方式缩并，跟踪张量最多可以达到3阶，只需要固定的内存和线性的时间花销。 ​ 缩并过程中每一步的内存消耗与越过缩并区域边界的每一条腿的维数的积相对应。但是并不是所有的图都有有效的缩并顺序。例如下图的2D格结构，如果张量的数量为$n$，缩并过程中，最小的最大跨越腿数为$\\sqrt{n}$。 这里描述的冒泡每次选取一个张量，然后一个接一个地收缩其他张量，但这通常不是最有效的顺序。通常，多重冒泡方法更快。 Computational complexity​ 一些张量网络由于复杂度理论给出的原因，并不存在有效的缩并过程。可以通过一些优化冒泡算法来加速张量网络缩并的过程，但是这个问题是NP-complete的，并不存在通用的有效方法。即使忽略所使用的特定冒泡，总体缩并过程的复杂性通常也会令人望而却步。 Problem1.考虑下列的张量，每个指标的维度为3维，指标从0开始： 计算下面张量网络的值： answer: 首先，进行全局坐标的分配，给出全局坐标下各张量的表示 结果可以表示为 \\begin{align} T&=\\sum_{\\alpha,\\beta,\\gamma,\\delta,\\epsilon=0}^2 A_{\\alpha,\\beta}B_{\\alpha,\\gamma,\\delta}C_{\\delta,\\epsilon}D_{\\beta,\\gamma,\\epsilon} \\\\ &=\\sum_{\\alpha,\\beta,\\gamma,\\delta,\\epsilon=0}^2(\\beta^2-2\\alpha)(-3^\\alpha\\gamma+\\delta)\\beta\\gamma\\epsilon^2 \\\\ &=1080 \\end{align} 一共$3^5=243$项求和，还是需要计算机来计算的。 2.在这个问题中，我们将考虑展开一个缩并序列，以一种编码收缩时需要的方式。给定一个网络和一个相关的冒泡，我们希望写出一个表来跟踪缩并张量的当前对象的指标，与缩并有关的指标，以及新指标。例如网络 在按字母顺序冒泡的时候，所讨论的表是这样的 那么对于下列的网络 在按字母顺序冒泡时，给出一个对于的上述表格。 这个题目的意义是让读者熟悉张量网络构建的过程，在计算机上执行的算法是怎么样的，数据结构的大概形式如何。current是一个保存着当前的腿的集合，New是新增的要加入current的腿集合，contract则是要减少current的腿的集合。 3. 4.类似于奇异值分解，给定一个指标的对分，我们可以考虑张量的范数。 （a) 算子范数是否依赖于对分，即相同张量的任意两个对分上的算子范数是否一定相等？ ​ 根据算子范式$||M||_\\infty$的定义可以看出，其依赖于张量的对分。 （b) 那么对于Frobenius范数呢？如果不同，画出张量网络图来说明其与对分不相关。 ​ 对于矩阵$M$，Frobenius范数为$Tr(MM’)$。对于三阶张量的F范数，如图所示 ||A||_F =\\sqrt{\\sum_{i_1,\\ldots,i_r}|A_{i_1,\\ldots,i_r}|^2} 可以看到，其值与如何划分指标无关。 Thinking 张量网络缩并的最终结果有什么意义？ 缩并的跟踪张量的变化过程是否包含什么信息？ 缩并的过程是否是可逆的？ 张量网络和神经网络有什么不同之处和相同之处？","link":"/2020/02/18/Introduction-to-tensor-network-notation/"},{"title":"量子线路","text":"计算机是物理的对象，而计算是物理的过程。计算机计算的范围完全由物理定律而不是纯数学决定 ———-David Deutsch 量子线路语言是描述量子算法有效和有力的描述方式，它包含描述计算过程的一组离散元件的集合。这个工具将使我们能够用类似于需要的门的总数或线路深度来量化算法的花销，也带来了一些简化算法设计的丰富技巧，并较容易从概念上形象的认识算法。 单量子比特计算单量子比特表示 |\\psi\\rangle = a|0\\rangle+b|1\\rangle \\qquad其中，复数a,b满足 \\quad{|a|}^2+|b|^2=1一些重要矩阵，Pauli矩阵： X\\equiv\\begin{bmatrix} 0 & 1 \\\\ 1 & 0 \\end{bmatrix} , Y\\equiv\\begin{bmatrix} 0 & -i \\\\ i & 0 \\end{bmatrix} , Z\\equiv\\begin{bmatrix} 1 & 0 \\\\ 0 & -1 \\end{bmatrix}Hadamard门、Phase gate和$\\pi/8$门： H=\\frac{1}{\\sqrt{2}}\\begin{bmatrix} 0 & 1 \\\\ 1 & 0 \\end{bmatrix} , S=\\begin{bmatrix} 1 & 0 \\\\ 0 & i \\end{bmatrix} , T=\\begin{bmatrix} 1 & 0 \\\\ 0 & exp(i\\pi/4) \\end{bmatrix}旋转算子定义如下： 练习4.1受控运算本节说明，如何从基本运算基础搭建起来的量子线路实现复杂的受控运算。 CNOT 相当于$|c\\rangle|t\\rangle \\rightarrow |c\\rangle|t\\bigoplus c\\rangle$ controlled-U 相当于$|c\\rangle |t\\rangle \\rightarrow |c\\rangle U^c |t\\rangle$ 测量量子线路测量有两个重要原理值得记住。 _推迟测量原理(principle of deferred measurement)_总可以把测量从量子线路的中间步骤移到线路的末端；如果测量的结果被用于线路的某些阶段，则经典的运算可以被条件量子运算代替。 \\langle !— more —&gt; 隐含测量原理（principle of implicit measurement)不失一般性，量子线路中任何未终结的量子连线（未被测量的量子比特）总可以假设为被测量。 测量的一个普遍特点——为使一个测量是可逆的，它一定不能揭示被测量子状态的任何信息 通用量子门Two-level unitary gates are universal 对于作用在d维Hilbert空间上的酉矩阵U，可以分解非两级酉矩阵的乘积，即只不平凡地作用在向量的一个或两个分量上的酉矩阵， Single qubit and CNOT gates are universal 单量子比特门和受控非门可以实现n量子比特状态空间上的任意两级酉运算。因此，结合前一条结论，单量子比特门和受控非门可以实现n量子比特状态空间上的任意酉运算，于是它们对量子计算是通用的。 A discrete set of universal operations 门的离散集合不可能精确实现任意的酉运算，因为酉运算的集合是连续的。然而，可以用一个离散的集合去近似任意的酉运算。 Hadamard + phase + CNOT + π/8 是一个通用门集合。 但是要注意的是近似任意酉门通常是难的。 量子线路模型的关键要素 经典资源。量子计算机包括两部分，经典计算部分和量子计算部分。在计算中允许部分计算以经典的方式进行，某些任务的完成将容易得多。 适当的状态空间。量子线路在某个数目为n的量子比特组上进行操作，因此状态空间是$2^n$维复Hilbert空间。积形式$|x_1,\\cdots,x_n\\rangle$，其中$x_i = 0,1$的状态称为计算机的计算基态。$|x\\rangle$表示一个计算基态，其中$x$是二进制表示为$x_1 \\cdots x_n$的数。 将状态置于计算基中的能力。假设任何的计算基态$|x_1,\\cdots,x_n\\rangle$可以在至多n步内制备出来。 进行量子门运算的能力。门可以随意应用到量子比特的任意子集，并可以实现一组通用门。例如，在量子计算机上可以把受控非门用到任何一对量子比特上，Hadamard门、相位、受控非门和$\\pi/8$门构成一组可以近似任意酉运算的门，因此是一组通用门，还存在其他的通用类。 在计算基中测量的能力，计算机中可以进行在计算基中一个或多个量子比特的测量。 量子系统的仿真仿真原理用经典计算机模拟量子系统是可能的，但一般而言不是很有效。许多简单量子系统的动态行为服从Schrodinger方程 i\\hbar \\frac{d}{dt} | \\psi\\rangle = H | \\psi\\rangle我们常常将$\\hbar$放入$H$中。对于一个研究空间中实际粒子的物理学家感兴趣的Hamilton量，这个方程可以简化为 i\\frac{\\partial}{\\partial t} \\psi(x) = [-\\frac{1}{2m}\\frac{\\partial^2}{\\partial x^2} + V(x)]\\psi(x)其中使用了称为位置表示的约定$\\langle x|\\psi\\rangle = \\psi (x)$。 仿真Schrodinger方程并不是模拟量子系统中面临的特殊困难。模拟量子系统的关键挑战是，必须求解的微分方程为指数数目。对$n$量子比特的系统，必须求解$2^n$个方程。有时具有洞察力的近似可以减少方程个数，从而使这种量子系统的经典仿真成为可行。然而，有许多物理上有意义的量子系统，人们尚不知道它们的这类近似。 量子仿真算法量子仿真算法的核心是渐近近似定理。 (Trotter公式) 令$A$和$B$是Hermite算子，则对任意实数$t$，有 {\\lim_{n \\to +\\infty}}(e^{iAt/n}e^{iBt/n})^n = e^{i(A+B)t/n}注意，即使对$A$和$B$不对易的情况也是成立的。 算法 量子仿真 输入 （1）作用在N维系统上的Hamilton量$H = \\sum_{k} H_k$，其中每个$H_k$作用在规模独立于N的小的子系统上；（2）系统在$t=0$时刻的初态$| \\psi_0\\rangle$；（3）正的非零精度$\\delta $；（4）获得期望状态的时间$ t_f $。 输出 状态$|\\widetilde{\\psi}(t_f)\\rangle$，使得$|\\langle \\widetilde{\\psi}(t_f)|e^{-iHt_f}|\\psi_0\\rangle|^2 \\geq 1-\\delta$。 运行时间 $O(poly(1/\\delta))$数目的操作。 过程 选择一个表示，使得$n=poly(logN)$量子比特的状态$| \\widetilde{\\psi}\\rangle$能近似系统状态，且算子$e^{-iH_k \\Delta t}$有有效的量子线路近似。选择一个近似方法和$\\Delta$，使得期望误差是可接受的（并且对某个整数$j$，$j\\Delta t = t_f$），为迭代构造一个相应的量子线路$ U_{\\Delta t}$，并且执行： $|\\widetilde{\\psi}_0\\rangle \\leftarrow |\\psi_0\\rangle$；$j=0$ //状态初始化 $\\rightarrow |\\widetilde{ {\\psi} }_{j+1}\\rangle =U_{\\Delta}|\\widetilde{ {\\psi} }_{j}\\rangle$ //迭代更新 $\\rightarrow j=j+1$，转到（2）直到$j\\Delta t \\geq t_f$ //循环 $\\rightarrow |\\widetilde{\\psi}(t_f)\\rangle = |\\widetilde{\\psi}_{j}\\rangle$ //最终结果","link":"/2020/02/17/%E9%87%8F%E5%AD%90%E7%BA%BF%E8%B7%AF/"},{"title":"论文修改意见","text":"ABSTRACT 先说了最近提出的一种gate model架构有什么，这个架构有什么作用（写得比较大概）。然后提出架构还应能支持波形补偿和波形标定。因此，文章提出了一种关于电极事件队列的用于超导控制的微架构。它有两个核心：1、电极事件操作单元。2、局部和全局事件的混合电路描述方法。（这里加上这个架构的效果如何，对上面提出问题的解决效果如何）（最后结束的两句话感觉有一些突兀，用FPGA实现可以放到前面，FPGA用缩写就可以） 总的来说，写得有些简略。可以再思考下重点和创新之处如何体现，可以对这些内容多叙述一些。 INTRODUCTION 这一段可以写得更详细一些。运用商用的设备会消耗很多的资源，不具备拓展性。所以现在大家用的都是自定义的专用超导芯片FPGA控制板，这已经部分解决了资源消耗大的问题。付祥的结构应该也是在这之后提出的，所以这个前因要改一下。可以加上目前大家都在用的控制方案，都解决的哪些问题。叙述好整个研究的背景，为后面的要解决的问题做铺垫。 这段以由于量子芯片的硬件限制，架构设计面临新的挑战开头。后面两大块应以硬件限制在哪里，以什么方式去解决的逻辑去说的。第二点，波形补偿段应该改下，这一段看起来就变成了简单的介绍这个方法有什么用，不是从问题提出到解决。可以叙述为串扰有什么影响，然后波形补偿可以如何解决。 it指代什么可以具体化。 可以调整一下叙述顺序，把具体的方法是什么放前面，再说这样的方法有什么效果。参照第一点。 RELATED WORKS distribued和centralized是形容词，可以加个form。开始说主要有两种处理器架构适配不同的语言，段尾又说一次，反复读感觉有些奇怪。 这段介绍了分布式结构，缺少了这样的结构有什么优势和问题。我觉得related works要有目的介绍，介绍的这些要对自己的主题有用，这些架构都有各自的优点，也有各自的缺点，它们又什么做不到的地方，而这些地方是我们架构可以做的，这就让人提起精神。这些虽然会在挑战那部分具体说，前面也需要提，一步步引导。如果只是简单的介绍，让人不太明白这一段跟整个文章又多少联系。 这段是如何与上面相关联的要叙述清楚。前两段分别介绍了分布式和集中式，这一段突然跳到高层抽象的特点，high-level abstration这个词之前没有出现和提到过，用As for得有些奇怪。 全局事件是可行的是本段的论点，可以放前面，更清晰一些。这两段的问题是如何与前面介绍的前人工作联系到一起的，可以说清楚。global event和global event operation用词可以统一一下，统一用一个词。 总的来说，related works结构有些松散，有哪些联系没有说清楚。可以将段间联系加强，变得有连续性。 MICROARCHITECTURAL CHALLENGESLimitations Of The Gate Model 这段介绍了gate model是什么，末尾提到这样的结构不支持波形补偿和波形参数标定。接下来的两部分具体介绍波形补偿和参数标定，讨论gate model为什么不能支持这两种操作。 Waveform compensation 电路模型的波形补偿增加指令数量，减少了电路并行性。可以统一一下说法，改为增加电路深度。因为后两段，说的是gate model在两种情况下考虑补偿所导致的需要描述的操作增加和电路深度的提高。X180这些表示，180放下标或上标可能比较好。另外，高亮这两个公式看不太懂。 Calibration experiment 因为存在噪声等因素，需要进行周期性的标定，这个标定过程不能用门描述完成。 Description Of High Gate Diversity Circuit在高门密度时，付祥的架构会遇到问题。但是一般的控制架构并没有问题，一般的控制架构只是执行测量实验时，波形较长。因此，文章中的gate model说的只是付祥的架构，用gate model来指代付祥的架构是否合适，还应该再考虑一下。如IBM的系统执行时，在qiskit语言编写阶段也是用门操作来描述的，只是后面转化为波形了。 QUANTUM MICROARCHITECTURE 这段介绍结构的大概文件流过程。 这段介绍量子指令集。叙述上，ebQIS包括经典指令和量子指令，经典指令有哪些。这里少了一句话，量子指令有哪些。并在figure 6中表现出来。 Electrode Based Quantum Operation Unit lower-level control具体指代什么。 这一整段看不懂。XYevent_1,XYevent_2在图上代表什么。有XY和Z操作为什么说是单电极事件。这两个例子是怎么和图片对上的。图片注释也需要加上说明上下两幅图都分别代表什么抽象。 Hybrid Event Description Scheme这一部分很长，叙述的结构可以修改一下，不然很难读下去。这部分目前的结构是，第一段说明需要全局事件和部分事件，第二段局域事件是什么和有什么用，第三段全局事件是什么有什么用，这是读者对局域事件和全局事件是什么并没有一个具体的认识。应该把对图10的说明提前，提到局域事件和全局事件的说明中，配合图一起说明，这样读者才容易对这两个概念产生具体的图像。然后再说这样的设定有说明作用，为什么可以用在不同的实验中。 图b左边是如何对应于右边的要说清楚。 XYevent_1、XYevent_2,3、XYevent_4，代表说明图中并没有相应的对应。这和前面的XYevent_1,XYevent_2是不是一个东西。 总的来说，Hybrid Event Description Scheme，这一段太长了，而且很多指代不明，不是按照图来说的，很难看懂。 Multi-level Compilation Scheme 这张图的图b可以改为上下并列的，并用相同的时间刻度，标上哪部分是XY电极执行的，哪部分是Z电极执行的。 这一段太长了，而且没有明显的分点分段突出，读不下去。和前面一样，可以多分段，多分点。 IMPLEMENTATIONfigure 15是不是和figure 5有些重复了。 implementation将微架构各小部件介绍了一遍。很多都是经典计算机中很成熟的东西，不用介绍那么多。我们没实际做过，这部分写起来就像写流水账一样。另外，注意分点。 EVALUATION 按照SG、MG、EB分段，把这些词放在段首，并斜体化。后面也要根据不同的讨论点分点分段。","link":"/2020/02/17/%E8%AE%BA%E6%96%87%E4%BF%AE%E6%94%B9%E6%84%8F%E8%A7%81/"},{"title":"本博客的搭建方法","text":"博客搭建过程参考了TRHX的文章 使用 Github Pages 和 Hexo 搭建自己的独立博客 主题选择使用的是ICARUS主题 ICARUS主题展示 在github上clone了ICARUS主题再修改了一些配置项 ICARUS文件 主题的修改过程参考了 搭建自己的技术博客系列（六)","link":"/2020/02/17/%E6%9C%AC%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E6%96%B9%E6%B3%95/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/02/15/hello-world/"},{"title":"近期计划1","text":"量子算法学习 学习绿皮书四五六章 。即量子线路部分，量子傅里叶变换和量子搜索算法部分。仔细思考，包括习题。 学习Andrew M. Childs的量子计算讲义。这部分是在上一步的基础上完成的。","link":"/2020/02/17/%E8%BF%91%E6%9C%9F%E8%AE%A1%E5%88%921/"},{"title":"链接整理","text":"常用谷歌学术镜像 量子计算Andrew M. Childs 量子计算讲义John PreskillQIP’23 蔻享学术视频 TensorNetworkTensorNetworkgoogle/TensorNetwork 计算机dblp: computer science bilbliography","link":"/2020/02/17/%E9%93%BE%E6%8E%A5%E6%95%B4%E7%90%86/"},{"title":"tensor network and quantum information","text":"​ 在这一节中，将讨论一些量子信息概念的例子，这些概念可以用张量网络符号更好地理解。 Bell state and the Bell basis​ Bell基(Bell basis)构成了两粒子最大纠缠态的正交集合。Bell基标准的标记如下： |\\Phi^{\\pm}\\rangle :=(|0\\rangle \\otimes |0\\rangle \\pm |1\\rangle \\otimes |1\\rangle)/\\sqrt{2}\\\\ |\\Psi^{\\pm}\\rangle :=(|0\\rangle \\otimes |1\\rangle \\pm |1\\rangle \\otimes |0\\rangle)/\\sqrt{2}\\\\对于第一个基$|\\Phi^{+}\\rangle$，称为Bell态(Bell state)，用$|\\Omega\\rangle$表示。 |\\Omega \\rangle = \\frac{1}{\\sqrt{2} } \\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\\\ 1 \\end{pmatrix} \\quad \\mathop{\\rightleftharpoons}_{Vectorise}^{Matricise} \\quad \\frac{1}{\\sqrt{2} } \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} =\\frac{I}{\\sqrt{2} }在张量网络符号中，它被简单地表示为一条连接两条腿的线。 ​ 要注意，这样一个表示包含很深刻的意义，如果将线的末端视为两个比特，对一个比特执行操作相当与对另一个比特执行转置操作，这很容易验证。那么，连线就意味着比特的纠缠。 ​ 定义$|\\Omega(\\Omicron)\\rangle=(\\Omicron\\otimes I)|\\Omega\\rangle$。根据这个定义，我们可以看到Bell基简单的对应着泡利算子的向量化。 |\\Phi^+ \\rangle = |\\Omega(I)\\rangle,\\quad |\\Phi^- \\rangle = |\\Omega(Z)\\rangle, \\quad |\\Psi^+ \\rangle = |\\Omega(X)\\rangle, \\quad |\\Psi^- \\rangle \\propto |\\Omega(Y)\\rangle \\quad​ 因此，可以看到Bell基与Pauli算符密切相关，在Bell基上的欧几里德内积(Euclidean inner product)状态对应于上Pauli算符的希伯特-施密特内积(Hilbert-Schmidt inner product)。 Quantum teleportation​ 给定上面的Bell基标记，我们就可以用TNN来表示和理解量子隐态传输。 |\\phi_B\\rangle = \\mathop{\\overbrace{(p_B)}}^{Correction} \\mathop{\\overbrace{(\\langle\\Omega_{A_1A_2}(p))}}^{Teleportation} \\mathop{\\overbrace{(|\\psi_{A_1}\\rangle \\otimes |\\Omega_{A_2B}\\rangle)}}^{Setup} = |\\psi_B\\rangle/2 ​ 可以看到公式与TNN相对应，公式和TNN都从右往左看。在TNN上用一条竖线往下画，可以截断3条横线，这三条并列的横线与Setup相对应。Teleportation过程相作用了一个左矢，相当于在TNN作用一个开口向右的弧线，将腿的数量减少到1。最后Correction的过程，在B上作用一个$p$。可以看到B最后可以得到$|\\psi\\rangle/2$。然后要验证一下，隐态传输算法中，$p$是否满足如上的关系，确定这TNN表达的合理性。 Gate teleportation |\\phi\\rangle = \\mathop{\\overbrace{(C_p)}}^{Correction} \\mathop{\\overbrace{(\\langle\\Omega_{A_1A_2}(p))}}^{Teleportation} \\mathop{\\overbrace{(|\\psi_{A_1}\\rangle \\otimes |\\Omega_{A_2B}(U^T)\\rangle)}}^{Setup} =C_pUp^{\\dagger}|\\psi\\rangle/2 ​ 如果令$C_p:=UpU^\\dagger$，那么Bob总是可以得到$U|\\psi\\rangle$。如果$U$是Clifford操作(Clifford群是将Paulis映射到Paulis的操作群)，这个修正也是一个泡利，这个传送过程在传送门的使用上并不比标准的传送需要更多的资源。 Purification​ 对于一个混合态$\\rho$，提纯(purification)就是一个将原系统拓展到更大系统(添加的系统称为提纯系统)的纯态(pure state)$|\\psi \\rangle$，以减少原系统$\\rho$的密度。这样的提纯可以给出为$|\\psi\\rangle \\propto (\\sqrt{\\rho} \\otimes I)|\\Omega \\rangle = |\\Omega (\\sqrt{\\rho})\\rangle$。 ​ 通过维度计数，可以看出上述提纯在提纯系统的等轴自由度范围内是唯一的，所以的提纯都是$(\\sqrt{\\rho} \\otimes U)|\\Omega \\rangle$的形式，其中$U^\\dagger U= 1$，即所有的提纯正比于$(\\sqrt{\\rho} \\otimes I)|\\Omega \\rangle$，$|\\Omega\\rangle$可以是其他最大纠缠态。 Stinespring’s Dilation theorem​ Stinespring’s Theorem指出，任意量子通道$\\varepsilon$，即一个完全的正保迹映射(completely positive trace preserving map(CPTP))，可以被表示为一个幺正算符作用在更大的系统上，再取偏迹。 \\varepsilon(\\rho) = Tr_1[V^\\dagger(\\rho \\otimes|0\\rangle\\langle0|)V]在物理上，这意味着，一个动态的开放系统等价于一个更大的封闭系统的子系统。 ​ 任意CPTP映射可以被表示为Kraus操作$K_i$的集合： \\varepsilon(\\rho)=\\sum_i K_i^\\dagger \\rho K_i,\\quad 其中\\sum_i K_iK_i^\\dagger=I.其TNN表示为 接着定义张量$U$为 可以看到$U$满足$U^\\dagger U=I$，可将其视为$V$加上一个附加比特 ​ 通过这样的表示，再对上指标取偏迹，Stinespring Dilation Theorem可以表示为： Problems1.考虑隐态传输的反向。Alice想要将一个经典比特发送给Bob，且她有一个可以传输量子比特的通道。那么单量子比特可以传输多少比特的信息呢？为了简单考虑，只考虑Bob可以执行投影测量的情况。 2.假设Alice和Bob初始共享一个Bell对。这个提前共享的纠缠资源是否可以增加成功传输的经典信息的数量，如果可以的话，增加了多少呢？ superdense coding","link":"/2020/02/19/tensor-network-and-quantum-information/"},{"title":"Matrix product states","text":"​ 矩阵积态(Matrix product states(MPS))是模拟实际物理系统一维量子低能态的一种很自然的选择。这节将以从两个定义MPS的方式开始，给出一些分析MPS的例子，展示这个简单网络的复杂度。介绍MPS的一些性质之后，后续将直接对网络进行操作而不再是操作量子态。 ​ 令$|\\psi\\rangle = \\sum_{j_1 j_2\\ldots j_N=0}^{d-1}C_{j_1 j_2\\ldots j_N=0} |j_1\\rangle \\otimes |j_2\\rangle \\otimes \\cdots \\otimes |j_N\\rangle$为$N$比特的量子态表示，这个量子态可以完全的由$N$阶张量$C$确定。 ​ 将第一个指标分离出来，再执行奇异值分解(SVD)，可以得到施密特分解(Schmidt decomposition) |\\psi\\rangle = \\sum_i \\lambda_i|L_i\\rangle \\otimes |R_i\\rangle其中$\\lambda_i$为施密特权值，${|L_i\\rangle}$和${|R_i \\rangle}$为正交的向量集合。 ​ 图像化表示如下 $\\lambda$是包含施密特权值的对角矩阵。 ​ $\\alpha$-Renyi entropy为 S_\\alpha(\\rho)=\\frac{1}{1-\\alpha}\\log Tr\\rho^\\alpha其中$\\rho$是密度矩阵。 ​ 执行连续的SVD依次分割 将奇异值张量$\\lambda^{(i)}$并入局部张量$M^{(i)}$，可以得到更一般的形式 ​ 这就是矩阵积态(matrix product state)。这个结构是通用且精确的，可以添加更多的系数来讨论更复杂的形式。 ​ 考虑链上任意对分纠缠有界的量子态，假设施密特权值中只有$D$非零。因此可以使用这个性质来截断$\\lambda$矩阵，进而优化MPS的表示。特别的，任意满足strong area law，即对任意对分满足$S_0 \\leq \\log c$($c$为常数)，的量子态可以表示为仅需要$\\Omicron(dNc^2)$个系数的MPS。在许多相关状态下，冯诺依曼熵的面积定律($S_1=\\Omicron(1) $)足以保证在MPS只有$poly(N)$的结合维度的情况下也有任意的良好近似。 ​ 在TNN中，矩阵积态是一种误称，因为大多数参与的张量为3阶。未参与缩并的指标为物理(physical)指标，而另外的两个指标为虚(virtual)指标，键(bond)指标或矩阵(matrix)指标。为了方便，也为了最有效地捕获周期状态，MPS ansatz通常表示为 |\\psi[A^{(1)},A^{(2)},\\ldots,A^{(N)}]\\rangle = \\sum_{i_1,i_2,\\ldots,i_N}Tr[A_{i_1}^{(1)}A_{i_2}^{(2)}\\ldots A_{i_N}^{(N)}] |i_1 i_2 \\ldots i_N \\rangle或者在平移不变的情况下表示为 |\\psi[A]\\rangle = \\sum_{i_1,i_2,\\ldots,i_N}Tr[A_{i_1}A_{i_2}\\ldots A_{i_N}] |i_1 i_2 \\ldots i_N \\rangle注意，在这种形式中，矩阵索引被忽略，矩阵乘法是隐含的。该MPS的图形形式为 1D projected entangled pair states​ 除了上述的结构，MPS可以视为投影纠缠对态(projected entangled pair states(PEPS))结构的特殊结构。这个过程为将纠缠对态$|\\phi \\rangle$布局在晶格上，然后对每对纠缠态施加映射$P$。 ​ 这样的结构等价于使用$|\\phi \\rangle = \\sum_{j=0}^{d-1}|dd \\rangle$构建张量网络。将线性映射$P$写为 P=\\sum_{i,\\alpha,\\beta}A_{i;\\alpha,\\beta}|i\\rangle\\langle\\alpha\\beta|.其中张量$A$实际上是上面介绍的MPS张量。纠缠对的选择保证了，作用在Bell态上的PEPS“投影”对应的张量$A$就是对应的张量$A$的缩并：","link":"/2020/02/20/Matrix-product-states/"}],"tags":[{"name":"TensorNetwowrk","slug":"TensorNetwowrk","link":"/tags/TensorNetwowrk/"},{"name":"量子线路","slug":"量子线路","link":"/tags/%E9%87%8F%E5%AD%90%E7%BA%BF%E8%B7%AF/"},{"name":"论文","slug":"论文","link":"/tags/%E8%AE%BA%E6%96%87/"},{"name":"博客搭建","slug":"博客搭建","link":"/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"name":"计划","slug":"计划","link":"/tags/%E8%AE%A1%E5%88%92/"},{"name":"链接","slug":"链接","link":"/tags/%E9%93%BE%E6%8E%A5/"}],"categories":[]}